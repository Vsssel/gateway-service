// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: product_service/product_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductCatalogService_GetProductDetails_FullMethodName         = "/product.v1.ProductCatalogService/GetProductDetails"
	ProductCatalogService_ListProductsInternal_FullMethodName      = "/product.v1.ProductCatalogService/ListProductsInternal"
	ProductCatalogService_UpdateStock_FullMethodName               = "/product.v1.ProductCatalogService/UpdateStock"
	ProductCatalogService_GetCategoryDetails_FullMethodName        = "/product.v1.ProductCatalogService/GetCategoryDetails"
	ProductCatalogService_ListCategoriesInternal_FullMethodName    = "/product.v1.ProductCatalogService/ListCategoriesInternal"
	ProductCatalogService_CheckProductsAvailability_FullMethodName = "/product.v1.ProductCatalogService/CheckProductsAvailability"
)

// ProductCatalogServiceClient is the client API for ProductCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCatalogServiceClient interface {
	GetProductDetails(ctx context.Context, in *GetProductDetailsRequest, opts ...grpc.CallOption) (*GetProductDetailsResponse, error)
	ListProductsInternal(ctx context.Context, in *ListProductsInternalRequest, opts ...grpc.CallOption) (*ListProductsInternalResponse, error)
	UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*UpdateStockResponse, error)
	GetCategoryDetails(ctx context.Context, in *GetCategoryDetailsRequest, opts ...grpc.CallOption) (*GetCategoryDetailsResponse, error)
	ListCategoriesInternal(ctx context.Context, in *ListCategoriesInternalRequest, opts ...grpc.CallOption) (*ListCategoriesInternalResponse, error)
	CheckProductsAvailability(ctx context.Context, in *CheckProductsAvailabilityRequest, opts ...grpc.CallOption) (*CheckProductsAvailabilityResponse, error)
}

type productCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCatalogServiceClient(cc grpc.ClientConnInterface) ProductCatalogServiceClient {
	return &productCatalogServiceClient{cc}
}

func (c *productCatalogServiceClient) GetProductDetails(ctx context.Context, in *GetProductDetailsRequest, opts ...grpc.CallOption) (*GetProductDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductDetailsResponse)
	err := c.cc.Invoke(ctx, ProductCatalogService_GetProductDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) ListProductsInternal(ctx context.Context, in *ListProductsInternalRequest, opts ...grpc.CallOption) (*ListProductsInternalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductsInternalResponse)
	err := c.cc.Invoke(ctx, ProductCatalogService_ListProductsInternal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*UpdateStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStockResponse)
	err := c.cc.Invoke(ctx, ProductCatalogService_UpdateStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetCategoryDetails(ctx context.Context, in *GetCategoryDetailsRequest, opts ...grpc.CallOption) (*GetCategoryDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoryDetailsResponse)
	err := c.cc.Invoke(ctx, ProductCatalogService_GetCategoryDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) ListCategoriesInternal(ctx context.Context, in *ListCategoriesInternalRequest, opts ...grpc.CallOption) (*ListCategoriesInternalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesInternalResponse)
	err := c.cc.Invoke(ctx, ProductCatalogService_ListCategoriesInternal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) CheckProductsAvailability(ctx context.Context, in *CheckProductsAvailabilityRequest, opts ...grpc.CallOption) (*CheckProductsAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckProductsAvailabilityResponse)
	err := c.cc.Invoke(ctx, ProductCatalogService_CheckProductsAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCatalogServiceServer is the server API for ProductCatalogService service.
// All implementations must embed UnimplementedProductCatalogServiceServer
// for forward compatibility.
type ProductCatalogServiceServer interface {
	GetProductDetails(context.Context, *GetProductDetailsRequest) (*GetProductDetailsResponse, error)
	ListProductsInternal(context.Context, *ListProductsInternalRequest) (*ListProductsInternalResponse, error)
	UpdateStock(context.Context, *UpdateStockRequest) (*UpdateStockResponse, error)
	GetCategoryDetails(context.Context, *GetCategoryDetailsRequest) (*GetCategoryDetailsResponse, error)
	ListCategoriesInternal(context.Context, *ListCategoriesInternalRequest) (*ListCategoriesInternalResponse, error)
	CheckProductsAvailability(context.Context, *CheckProductsAvailabilityRequest) (*CheckProductsAvailabilityResponse, error)
	mustEmbedUnimplementedProductCatalogServiceServer()
}

// UnimplementedProductCatalogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductCatalogServiceServer struct{}

func (UnimplementedProductCatalogServiceServer) GetProductDetails(context.Context, *GetProductDetailsRequest) (*GetProductDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetails not implemented")
}
func (UnimplementedProductCatalogServiceServer) ListProductsInternal(context.Context, *ListProductsInternalRequest) (*ListProductsInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductsInternal not implemented")
}
func (UnimplementedProductCatalogServiceServer) UpdateStock(context.Context, *UpdateStockRequest) (*UpdateStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedProductCatalogServiceServer) GetCategoryDetails(context.Context, *GetCategoryDetailsRequest) (*GetCategoryDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryDetails not implemented")
}
func (UnimplementedProductCatalogServiceServer) ListCategoriesInternal(context.Context, *ListCategoriesInternalRequest) (*ListCategoriesInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategoriesInternal not implemented")
}
func (UnimplementedProductCatalogServiceServer) CheckProductsAvailability(context.Context, *CheckProductsAvailabilityRequest) (*CheckProductsAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProductsAvailability not implemented")
}
func (UnimplementedProductCatalogServiceServer) mustEmbedUnimplementedProductCatalogServiceServer() {}
func (UnimplementedProductCatalogServiceServer) testEmbeddedByValue()                               {}

// UnsafeProductCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCatalogServiceServer will
// result in compilation errors.
type UnsafeProductCatalogServiceServer interface {
	mustEmbedUnimplementedProductCatalogServiceServer()
}

func RegisterProductCatalogServiceServer(s grpc.ServiceRegistrar, srv ProductCatalogServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductCatalogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductCatalogService_ServiceDesc, srv)
}

func _ProductCatalogService_GetProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCatalogService_GetProductDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetProductDetails(ctx, req.(*GetProductDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_ListProductsInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).ListProductsInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCatalogService_ListProductsInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).ListProductsInternal(ctx, req.(*ListProductsInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCatalogService_UpdateStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).UpdateStock(ctx, req.(*UpdateStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetCategoryDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetCategoryDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCatalogService_GetCategoryDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetCategoryDetails(ctx, req.(*GetCategoryDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_ListCategoriesInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).ListCategoriesInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCatalogService_ListCategoriesInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).ListCategoriesInternal(ctx, req.(*ListCategoriesInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_CheckProductsAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProductsAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).CheckProductsAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCatalogService_CheckProductsAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).CheckProductsAvailability(ctx, req.(*CheckProductsAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCatalogService_ServiceDesc is the grpc.ServiceDesc for ProductCatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.v1.ProductCatalogService",
	HandlerType: (*ProductCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductDetails",
			Handler:    _ProductCatalogService_GetProductDetails_Handler,
		},
		{
			MethodName: "ListProductsInternal",
			Handler:    _ProductCatalogService_ListProductsInternal_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _ProductCatalogService_UpdateStock_Handler,
		},
		{
			MethodName: "GetCategoryDetails",
			Handler:    _ProductCatalogService_GetCategoryDetails_Handler,
		},
		{
			MethodName: "ListCategoriesInternal",
			Handler:    _ProductCatalogService_ListCategoriesInternal_Handler,
		},
		{
			MethodName: "CheckProductsAvailability",
			Handler:    _ProductCatalogService_CheckProductsAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_service/product_service.proto",
}
